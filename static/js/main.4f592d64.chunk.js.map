{"version":3,"sources":["components/Page.tsx","routes.ts","pages/Router.tsx","helpers/history.ts","store/page/reducer.ts","store/page/selectors.ts","store/index.ts","theme.ts","App.tsx","serviceWorker.ts","index.tsx","store/weather/helpers.ts","api/weather.ts","store/weather/actions.ts","store/weather/reducer.ts","store/weather/index.ts","store/user/actions.ts","store/user/selectors.ts","store/user/reducer.ts","store/user/index.ts","constants.ts","store/weather/selectors.ts"],"names":["Page","Component","component","props","fallback","routes","exact","title","React","lazy","showBack","showMenu","Router","location","useLocation","Object","keys","map","path","key","createBrowserHistory","getDerivedStateForPath","pathname","omit","isActive","matchPath","reduce","prev","curr","handleActions","LOCATION_CHANGE","_","action","payload","persistConfig","storage","blacklist","generateStore","rootReducer","combineReducers","router","connectRouter","history","page","weather","user","composeEnhancers","compose","store","createStore","persistReducer","applyMiddleware","thunk","routerMiddleware","persistor","persistStore","theme","color","dayBlue","nightBlue","white","spacing","unit","contentWidth","get","units","join","curvature","small","large","typography","lineHeight","medium","input","effects","frostedGlass","backdropFilter","glassPane","size","halfSize","Math","floor","thirdSize","insetShadow","borderShadow","dropShadow","boxShadow","content","display","position","top","left","right","height","background","borderRadius","opacity","filter","App","loading","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","serializeTerm","city","state","toLowerCase","getWeather","a","queryString","replace","Axios","WeatherApiUrl","process","response","status","data","code","statusText","isError","createActions","FETCH_REQUEST","silent","FETCH_SUCCESS","FETCH_FAILURE","prefix","fetchRequest","fetchSuccess","fetchFailure","setUnits","fetchWeather","dispatch","getState","term","byTerm","timeFetched","Date","result","toString","previousTerm","activeSearch","terms","actions","actionsModule","selectors","selectorsModule","PIN_LOCATION","UNPIN_LOCATION","pinLocation","unpinLocation","isLocationPinned","pinnedLocations","find","item","index","findIndex","log","i","defaultCities","getWeatherForTerm","getActiveWeather"],"mappings":"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","file":"static/js/main.4f592d64.chunk.js","sourcesContent":["import React, { Suspense } from 'react';\nimport { PageConfig } from '../types';\n\ntype Props = PageConfig & {\n\tpath: string;\n};\n\nexport default function Page({ component: Component, ...props }: Props) {\n\treturn (\n\t\t<main>\n\t\t\t<Suspense fallback={<div>Loading...</div>}>\n\t\t\t\t<Component {...props} />\n\t\t\t</Suspense>\n\t\t</main>\n\t);\n}\n","import React from 'react';\nimport { PageConfig } from './types';\n\nconst routes: {\n\t[pagePath: string]: PageConfig;\n} = {\n\t'/': {\n\t\texact: true,\n\t\ttitle: 'Refunds & Returns',\n\t\tcomponent: React.lazy(() => import('./pages/content/HomePage')),\n\t\tshowBack: false,\n\t\tshowMenu: false\n\t},\n\t'/weather/:location': {\n\t\texact: true,\n\t\ttitle: `How's the weather in :location`,\n\t\tcomponent: React.lazy(() => import('./pages/content/WeatherPage')),\n\t\tshowMenu: true\n\t},\n\t'/settings': {\n\t\texact: true,\n\t\ttitle: 'Settings',\n\t\tcomponent: React.lazy(() => import('./pages/content/SettingsPage')),\n\t\tshowMenu: false,\n\t\tshowBack: false\n\t},\n\t'*': {\n\t\texact: false,\n\t\ttitle: 'Not Found',\n\t\tcomponent: React.lazy(() => import('./pages/content/NotFoundPage'))\n\t}\n};\n\nexport default routes;\n","import React from 'react';\nimport { Switch, useLocation } from 'react-router-dom';\nimport Page from '../components/Page';\nimport routes from '../routes';\n\nexport default function Router() {\n\tconst location = useLocation();\n\n\treturn (\n\t\t<Switch location={location}>\n\t\t\t{Object.keys(routes).map(path => (\n\t\t\t\t<Page key={path} path={path} {...routes[path]} />\n\t\t\t))}\n\t\t</Switch>\n\t);\n}\n","import { createBrowserHistory } from 'history';\n\nexport default createBrowserHistory();\n","import { handleActions } from 'redux-actions';\nimport { LOCATION_CHANGE } from 'connected-react-router';\nimport { matchPath } from 'react-router';\nimport { omit } from 'lodash';\nimport routes from '../../routes';\nimport { ReduxPageConfig } from '../../types';\n\nconst getDerivedStateForPath = (pathname: string) =>\n\tObject.keys(routes)\n\t\t.map(path => ({\n\t\t\t[path]: {\n\t\t\t\t...omit(routes[path], 'component'),\n\t\t\t\tisActive: !!matchPath(pathname, {\n\t\t\t\t\tpath,\n\t\t\t\t\t...omit(routes[path], 'showBack', 'showMenu', 'component')\n\t\t\t\t})\n\t\t\t} as ReduxPageConfig\n\t\t}))\n\t\t.reduce((prev, curr) => ({ ...prev, ...curr }), {});\n\nexport default handleActions(\n\t{\n\t\t[LOCATION_CHANGE]: (_, action: any) => getDerivedStateForPath(action.payload.location.pathname)\n\t},\n\tgetDerivedStateForPath('/')\n);\n","import { ReduxPageConfig, ReduxStore } from '../../types';\n\nexport function getPagesByAttribute<K extends keyof ReduxPageConfig>(\n\tattribute: K,\n\tvalue: ReduxPageConfig[typeof attribute]\n) {\n\treturn (state: ReduxStore): string[] => Object.keys(state.page).filter(key => state.page[key][attribute] === value);\n}\n\nexport const getActivePage = (state: ReduxStore): ReduxPageConfig | undefined =>\n\tstate.page[getPagesByAttribute('isActive', true)(state)[0]];\n\nexport default {\n\tgetPagesByAttribute,\n\tgetActivePage\n};\n","import { applyMiddleware, createStore, combineReducers, compose } from 'redux';\nimport { connectRouter, routerMiddleware } from 'connected-react-router';\nimport { persistStore, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage/session';\nimport thunk from 'redux-thunk';\nimport history from '../helpers/history';\nimport page from './page';\nimport weather from './weather';\nimport user from './user';\n\nconst persistConfig = {\n\tkey: 'root',\n\tstorage,\n\tblacklist: ['router']\n};\n\nexport const generateStore = () => {\n\tconst rootReducer = combineReducers({\n\t\trouter: connectRouter(history),\n\t\tpage,\n\t\tweather,\n\t\tuser\n\t});\n\n\tlet composeEnhancers = compose;\n\tif (process.env.NODE_ENV !== 'production') {\n\t\t// @ts-ignore\n\t\tcomposeEnhancers = window['__REDUX_DEVTOOLS_EXTENSION_COMPOSE__'] || compose;\n\t}\n\n\tconst store = createStore(\n\t\tpersistReducer(persistConfig, rootReducer),\n\t\t{},\n\t\tcomposeEnhancers(applyMiddleware(thunk, routerMiddleware(history)))\n\t);\n\tconst persistor = persistStore(store);\n\n\treturn { store, persistor };\n};\n\nexport default generateStore();\n","type Colors = 'dayBlue' | 'nightBlue' | 'white';\ntype Effects = 'frostedGlass';\n\nexport type WeatherTheme = {\n\tcolor: {\n\t\t[colorValue in Colors]: string;\n\t};\n\tspacing: {\n\t\tunit: number;\n\t\tcontentWidth: string;\n\t\tget: (...units: (number | 'auto')[]) => string;\n\t};\n\teffects: {\n\t\t[effectName in Effects]: object;\n\t} & {\n\t\tglassPane: (size: number) => object;\n\t};\n\tcurvature: {\n\t\tsmall: string;\n\t\tlarge: string;\n\t};\n\ttypography: {\n\t\tlineHeight: string;\n\t\tsmall: string;\n\t\tmedium: string;\n\t\tinput: string;\n\t\tlarge: string;\n\t};\n};\n\nconst theme: WeatherTheme = {\n\tcolor: {\n\t\tdayBlue: '#78acff',\n\t\tnightBlue: '#131319',\n\t\twhite: '#fff'\n\t},\n\tspacing: {\n\t\tunit: 5,\n\t\tcontentWidth: '960px',\n\t\tget(...units: (number | 'auto')[]) {\n\t\t\treturn units.map(unit => (unit === 'auto' ? 'auto' : `${5 * unit}px`)).join(' ');\n\t\t}\n\t},\n\tcurvature: {\n\t\tsmall: '5px',\n\t\tlarge: '10px'\n\t},\n\ttypography: {\n\t\tlineHeight: '1.4em',\n\t\tsmall: '10px',\n\t\tmedium: '14px',\n\t\tinput: '16px',\n\t\tlarge: '22px'\n\t},\n\teffects: {\n\t\tfrostedGlass: {\n\t\t\tbackdropFilter: 'blur(8px) grayscale(0.8)'\n\t\t},\n\n\t\tglassPane(size: number) {\n\t\t\tconst halfSize = Math.floor(size / 2);\n\t\t\tconst thirdSize = Math.floor(size / 3);\n\n\t\t\tconst insetShadow = `inset 0 -${size}px ${size * 3}px -${halfSize}px rgba(255, 255, 255, 0.6)`;\n\t\t\tconst borderShadow = `0 0 ${thirdSize}px 0 rgba(0, 0, 0, 0.3)`;\n\t\t\tconst dropShadow = `0 ${halfSize}px ${size}px -${halfSize}px rgba(0, 0, 0, 0.8)`;\n\n\t\t\treturn {\n\t\t\t\tboxShadow: `${insetShadow}, ${borderShadow}, ${dropShadow}`,\n\t\t\t\tbackdropFilter: 'blur(8px)',\n\n\t\t\t\t'&::before': {\n\t\t\t\t\tcontent: '\"\"',\n\t\t\t\t\tdisplay: 'block',\n\t\t\t\t\tposition: 'absolute',\n\t\t\t\t\ttop: size,\n\t\t\t\t\tleft: size,\n\t\t\t\t\tright: size,\n\t\t\t\t\theight: size,\n\t\t\t\t\tbackground: 'white',\n\t\t\t\t\tborderRadius: `${size}px`,\n\t\t\t\t\topacity: 0.5,\n\t\t\t\t\tfilter: 'blur(3px)'\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t}\n};\n\nexport default theme;\n","import React from 'react';\nimport { LiveAnnouncer } from 'react-aria-live';\nimport { Provider } from 'react-redux';\nimport { ConnectedRouter } from 'connected-react-router';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { ThemeProvider } from 'react-jss';\nimport Router from './pages/Router';\nimport history from './helpers/history';\nimport store from './store';\nimport theme from './theme';\n\n/**\n * Resources:\n * - Sun icon courtesy of https://www.flaticon.com/authors/dinosoftlabs\n * - Cloud image courtesy of https://pngriver.com/download-cloud-png-5-83292/\n * - Rain image courtesy of http://pngimg.com/download/13467\n * - Star iamge courtesy of https://www.flaticon.com/free-icon/star_1828884\n */\nexport default function App() {\n\treturn (\n\t\t<Provider store={store.store}>\n\t\t\t<PersistGate loading={null} persistor={store.persistor}>\n\t\t\t\t<ConnectedRouter history={history}>\n\t\t\t\t\t<ThemeProvider theme={theme}>\n\t\t\t\t\t\t<LiveAnnouncer>\n\t\t\t\t\t\t\t<Router />\n\t\t\t\t\t\t</LiveAnnouncer>\n\t\t\t\t\t</ThemeProvider>\n\t\t\t\t</ConnectedRouter>\n\t\t\t</PersistGate>\n\t\t</Provider>\n\t);\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n","import { BaseAction } from './types';\n\nexport const serializeTerm = ({ city, state }: BaseAction) => `${city.toLowerCase()}|${state.toLowerCase()}`;\n","import Axios from 'axios';\nimport { WeatherApiUrl } from '../constants';\nimport { ErrorResponse, WeatherResponseItem } from '../types';\n\ntype WeatherRequestItem = {\n\tcity: string;\n\tstate: string;\n\tunits?: string;\n};\n\nexport default async function getWeather({\n\tcity,\n\tstate,\n\tunits = 'metric'\n}: WeatherRequestItem): Promise<WeatherResponseItem | ErrorResponse> {\n\tif (!process.env.REACT_APP_OW_API_KEY) {\n\t\treturn {\n\t\t\tcode: 400,\n\t\t\tmessage: 'Missing required item from config OW_API_KEY',\n\t\t\tisError: true\n\t\t};\n\t}\n\n\ttry {\n\t\tconst queryString = [city, state.replace('-', ''), 'AU'].filter(Boolean).join(',');\n\n\t\tconst response = await Axios.get(\n\t\t\t`${WeatherApiUrl}?q=${queryString}&units=${units}&appid=${process.env.REACT_APP_OW_API_KEY}`\n\t\t);\n\t\tif (response.status === 200) {\n\t\t\treturn response.data as WeatherResponseItem;\n\t\t} else {\n\t\t\treturn {\n\t\t\t\tcode: response.status,\n\t\t\t\tmessage: response.statusText,\n\t\t\t\tisError: true\n\t\t\t};\n\t\t}\n\t} catch (e) {\n\t\treturn {\n\t\t\tcode: 500,\n\t\t\tmessage: e.message,\n\t\t\tisError: true\n\t\t};\n\t}\n}\n","import { createActions } from 'redux-actions';\nimport getWeather from '../../api/weather';\nimport { ErrorResponse, WeatherResponseItem } from '../../types';\nimport { serializeTerm } from './helpers';\nimport { FailureAction, RequestAction, SuccessAction } from './types';\n\nexport const { fetchRequest, fetchSuccess, fetchFailure, setUnits } = createActions(\n\t{\n\t\tFETCH_REQUEST: (city, state, silent = false): RequestAction => ({ city, state, silent }),\n\t\tFETCH_SUCCESS: (city, state, data: WeatherResponseItem): SuccessAction => ({\n\t\t\tcity,\n\t\t\tstate,\n\t\t\tdata\n\t\t}),\n\t\tFETCH_FAILURE: (city, state, error: ErrorResponse): FailureAction => ({\n\t\t\tcity,\n\t\t\tstate,\n\t\t\terror\n\t\t})\n\t},\n\t{\n\t\tprefix: '@WEATHER'\n\t}\n);\n\nexport const fetchWeather = (city: string, state: string, silent?: boolean) => async (\n\tdispatch: Function,\n\tgetState: Function\n) => {\n\tconst { weather } = getState();\n\tconst term = serializeTerm({ city, state });\n\n\tdispatch(fetchRequest(city, state, silent));\n\n\t// No need to re-fetch data that's fresh enough\n\tif (weather.byTerm[term]?.timeFetched > +new Date() - 5e3 * 60) return;\n\n\tconst result = await getWeather({ city, state });\n\tif (!(result as ErrorResponse).isError) {\n\t\tdispatch(fetchSuccess(city, state, result));\n\t} else {\n\t\tdispatch(fetchFailure(city, state, (result as ErrorResponse).message));\n\t}\n};\n","import { Action, handleActions } from 'redux-actions';\nimport { WeatherResponseItem } from '../../types';\nimport { fetchFailure, fetchRequest, fetchSuccess } from './actions';\nimport { serializeTerm } from './helpers';\nimport { RequestAction, SuccessAction } from './types';\n\nexport type WeatherState = {\n\tactiveSearch: string;\n\tpreviousTerm: string;\n\tbyTerm: {\n\t\t[term: string]: WeatherResponseItem & { timeFetched: number };\n\t};\n\tterms: string[];\n};\n\nexport default handleActions(\n\t{\n\t\t[fetchRequest.toString()]: (state, { payload }: Action<RequestAction>) => ({\n\t\t\t...state,\n\t\t\t...(payload.silent\n\t\t\t\t? {}\n\t\t\t\t: {\n\t\t\t\t\t\tpreviousTerm: state.activeSearch,\n\t\t\t\t\t\tactiveSearch: serializeTerm(payload)\n\t\t\t\t  })\n\t\t}),\n\n\t\t[fetchSuccess.toString()]: (state, { payload }: Action<SuccessAction>) => {\n\t\t\tconst term = serializeTerm(payload);\n\t\t\tconst byTerm = {\n\t\t\t\t...state.byTerm,\n\t\t\t\t[term]: {\n\t\t\t\t\ttimeFetched: +new Date(),\n\t\t\t\t\t...payload.data\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tbyTerm,\n\t\t\t\tterms: Object.keys(byTerm)\n\t\t\t};\n\t\t},\n\n\t\t[fetchFailure.toString()]: state => {\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tactiveSearch: state.previousTerm\n\t\t\t};\n\t\t}\n\t},\n\t{\n\t\tactiveSearch: '',\n\t\tpreviousTerm: '',\n\t\tbyTerm: {},\n\t\tterms: []\n\t} as WeatherState\n);\n","import * as actionsModule from './actions';\nimport * as selectorsModule from './selectors';\n\nexport { default } from './reducer';\n\nexport const actions = actionsModule;\nexport const selectors = selectorsModule;\n","import { createActions } from 'redux-actions';\nimport { PinAction } from './types';\n\nexport const { pinLocation, unpinLocation } = createActions(\n\t{\n\t\tPIN_LOCATION: (city, state): PinAction => ({ city, state }),\n\t\tUNPIN_LOCATION: (city, state): PinAction => ({ city, state })\n\t},\n\t{\n\t\tprefix: '@USER'\n\t}\n);\n","import { LocationSearch, ReduxStore } from '../../types';\n\nexport const isLocationPinned = (location: LocationSearch, state: ReduxStore) => {\n\tconst { pinnedLocations } = state.user;\n\n\treturn !!pinnedLocations.find(({ city, state }) => city === location.city && state === location.state);\n};\n","import { Action, handleActions } from 'redux-actions';\nimport { LocationSearch } from '../../types';\nimport { pinLocation, unpinLocation } from './actions';\nimport { PinAction } from './types';\n\nexport type UserState = {\n\tpinnedLocations: LocationSearch[];\n};\n\nexport default handleActions(\n\t{\n\t\t[pinLocation.toString()]: (state, { payload }: Action<PinAction>) => {\n\t\t\tif (state.pinnedLocations.find(item => item.city === payload.city && item.state === payload.state)) return state;\n\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tpinnedLocations: [...state.pinnedLocations, payload]\n\t\t\t};\n\t\t},\n\n\t\t[unpinLocation.toString()]: (state, { payload }: Action<PinAction>) => {\n\t\t\tconst index = state.pinnedLocations.findIndex(item => item.city === payload.city && item.state === payload.state);\n\n\t\t\tconsole.log('index: ', index);\n\n\t\t\tif (index === -1) return state;\n\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tpinnedLocations: state.pinnedLocations.filter((_, i) => i !== index)\n\t\t\t};\n\t\t}\n\t},\n\t{\n\t\tpinnedLocations: []\n\t} as UserState\n);\n","import * as actionsModule from './actions';\nimport * as selectorsModule from './selectors';\n\nexport { default } from './reducer';\n\nexport const actions = actionsModule;\nexport const selectors = selectorsModule;\n","import { LocationSearch } from './types';\n\nexport const WeatherApiUrl = '//api.openweathermap.org/data/2.5/weather';\n\nexport const defaultCities: LocationSearch[] = [\n\t{\n\t\tstate: 'VIC',\n\t\tcity: 'Melbourne'\n\t},\n\t{\n\t\tstate: 'NSW',\n\t\tcity: 'Sydney'\n\t},\n\t{\n\t\tstate: 'QLD',\n\t\tcity: 'Brisbane'\n\t},\n\t{\n\t\tstate: 'ACT',\n\t\tcity: 'Canberra'\n\t},\n\t{\n\t\tstate: 'NT',\n\t\tcity: 'Darwin'\n\t},\n\t{\n\t\tstate: 'SA',\n\t\tcity: 'Adelaide'\n\t},\n\t{\n\t\tstate: 'WA',\n\t\tcity: 'Perth'\n\t},\n\t{\n\t\tstate: 'TAS',\n\t\tcity: 'Hobart'\n\t}\n];\n","import { ReduxStore } from '../../types';\n\nexport const getWeatherForTerm = (term: string, state: ReduxStore) => state.weather.byTerm[term];\n\nexport const getActiveWeather = (state: ReduxStore) =>\n\tgetWeatherForTerm(state.weather.activeSearch, state) || getWeatherForTerm(state.weather.previousTerm, state);\n"],"sourceRoot":""}